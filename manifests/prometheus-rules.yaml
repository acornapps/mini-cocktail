apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: prometheus
  name: prometheus-rules
  namespace: monitoring
data:
  alerts: |-
    groups:
    - name: prometheus.rules
      rules:
      - alert: FailedReload
        expr: prometheus_config_last_reload_successful == 0
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Prometheus configuration reload has failed"
          description: "Reloading Prometheus' configuration has failed for {{ $labels.namespace }}/{{ $labels.pod}}."
    - name: alertmanager.rules
      rules:
      - alert: AlertmanagerConfigInconsistent
        expr: count_values by (service) ("config_hash", alertmanager_config_hash) / on(service) group_left label_replace(prometheus_operator_alertmanager_spec_replicas, "service", "alertmanager-$1", "alertmanager", "(.*)") != 1
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Alertmanager configurations are inconsistent"
          description: "The configuration of the instances of the Alertmanager cluster `{{$labels.service}}` are out of sync."
      - alert: AlertmanagerDownOrMissing
        expr: label_replace(prometheus_operator_alertmanager_spec_replicas, "job", "alertmanager-$1", "alertmanager", "(.*)") / on(job) group_right sum by(job) (up) != 1
        for: 5m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Alertmanager down or not discovered"
          description: "An unexpected number of Alertmanagers are scraped or Alertmanagers disappeared from discovery."
      - alert: FailedReload
        expr: alertmanager_config_last_reload_successful == 0
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Alertmanager configuration reload has failed"
          description: "Reloading Alertmanager's configuration has failed for {{ $labels.namespace }}/{{ $labels.pod}}."
    - name: general.rules
      rules:
      - alert: TargetDown
        expr: 100 * (count(up == 0) BY (job) / count(up) BY (job)) > 10
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Targets are down"
          description: "{{ $value }}% or more of {{ $labels.job }} targets are down."
      - alert: DeadMansSwitch
        expr: vector(1)
        labels:
          severity: "none"
        annotations:
          summary: "minikube Alerting DeadMansSwitch"
          description: "This is a DeadMansSwitch meant to ensure that the entire Alerting pipeline is functional."
      - alert: TooManyOpenFileDescriptors
        expr: 100 * (process_open_fds / process_max_fds) > 95
        for: 10m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube too many open file descriptors"
          description: "{{ $labels.job }}: {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.instance }}) is using {{ $value }}% of the available file/socket descriptors."
      - alert: FdExhaustionClose
        expr: predict_linear(instance:fd_utilization[1h], 3600 * 4) > 1
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube file descriptors soon exhausted"
          description: "{{ $labels.job }}: {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.instance }}) instance will exhaust in file/socket descriptors soon"
      - alert: FdExhaustionClose
        expr: predict_linear(instance:fd_utilization[10m], 3600) > 1
        for: 10m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube file descriptors soon exhausted"
          description: "{{ $labels.job }}: {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.instance }}) instance will exhaust in file/socket descriptors soon"
    - name: etcd.rules
      rules:
      - alert: InsufficientMembers
        expr: count(up{job="etcd"} == 0) > (count(up{job="etcd"}) / 2 - 1)
        for: 3m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube etcd cluster insufficient members"
          description: If one more etcd member goes down the cluster will be unavailable
      - alert: NoLeader
        #expr: etcd_server_has_leader{job="etcd"} == 0
        expr: count(up{job="etcd"} == 0) > 0
        for: 1m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube etcd member has no leader"
          description: etcd member {{ $labels.instance }} has no leader
      - alert: HighNumberOfLeaderChanges
        expr: increase(etcd_server_leader_changes_seen_total{job="etcd"}[1h]) > 3
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube a high number of leader changes within the etcd cluster are happening"
          description: etcd instance {{ $labels.instance }} has seen {{ $value }} leader changes within the last hour
      - alert: HighNumberOfFailedGRPCRequests
        expr: sum(rate(etcd_grpc_requests_failed_total{job="etcd"}[5m])) BY (grpc_method) / sum(rate(etcd_grpc_total{job="etcd"}[5m])) BY (grpc_method) > 0.01
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube a high number of gRPC requests are failing"
          description: '{{ $value }}% of requests for {{ $labels.grpc_method }} failed on etcd instance {{ $labels.instance }}'
      - alert: HighNumberOfFailedGRPCRequests
        expr: sum(rate(etcd_grpc_requests_failed_total{job="etcd"}[5m])) BY (grpc_method) / sum(rate(etcd_grpc_total{job="etcd"}[5m])) BY (grpc_method) > 0.05
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube a high number of gRPC requests are failing"
          description: '{{ $value }}% of requests for {{ $labels.grpc_method }} failed on etcd instance {{ $labels.instance }}'
      - alert: GRPCRequestsSlow
        expr: histogram_quantile(0.99, rate(etcd_grpc_unary_requests_duration_seconds_bucket[5m])) > 0.15
        for: 10m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube slow gRPC requests"
          description: on etcd instance {{ $labels.instance }} gRPC requests to {{ $labels.grpc_method }} are slow
      - alert: HighNumberOfFailedHTTPRequests
        expr: sum(rate(etcd_http_failed_total{job="etcd"}[5m])) BY (method) / sum(rate(etcd_http_received_total{job="etcd"}[5m])) BY (method) > 0.01
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube a high number of HTTP requests are failing"
          description: '{{ $value }}% of requests for {{ $labels.method }} failed on etcd instance {{ $labels.instance }}'
      - alert: HighNumberOfFailedHTTPRequests
        expr: sum(rate(etcd_http_failed_total{job="etcd"}[5m])) BY (method) / sum(rate(etcd_http_received_total{job="etcd"}[5m])) BY (method) > 0.05
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube a high number of HTTP requests are failing"
          description: '{{ $value }}% of requests for {{ $labels.method }} failed on etcd instance {{ $labels.instance }}'
      - alert: HTTPRequestsSlow
        expr: histogram_quantile(0.99, rate(etcd_http_successful_duration_seconds_bucket[5m])) > 0.15
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube slow HTTP requests"
          description: on etcd instance {{ $labels.instance }} HTTP requests to {{ $labels.method }} are slow
      - alert: EtcdMemberCommunicationSlow
        expr: histogram_quantile(0.99, rate(etcd_network_member_round_trip_time_seconds_bucket[5m])) > 0.15
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube etcd member communication is slow"
          description: etcd instance {{ $labels.instance }} member communication with {{ $labels.To }} is slow
      - alert: HighNumberOfFailedProposals
        expr: increase(etcd_server_proposals_failed_total{job="etcd"}[1h]) > 5
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube a high number of proposals within the etcd cluster are failing"
          description: etcd instance {{ $labels.instance }} has seen {{ $value }} proposal failures within the last hour
      - alert: HighFsyncDurations
        expr: histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) > 0.5
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube high fsync durations"
          description: etcd instance {{ $labels.instance }} fync durations are high
      - alert: HighCommitDurations
        expr: histogram_quantile(0.99, rate(etcd_disk_backend_commit_duration_seconds_bucket[5m])) > 0.25
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube high commit durations"
          description: etcd instance {{ $labels.instance }} commit durations are high
    - name: kubelet.rules
      rules:
      - alert: K8SNodeNotReady
        expr: kube_node_status_condition{condition="Ready",status="true"} == 0
        for: 1h
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Node status is NotReady"
          description: "The Kubelet on {{ $labels.node }} has not checked in with the API, or has set itself to NotReady, for more than an hour"
      - alert: K8SManyNodesNotReady
        expr: count(kube_node_status_condition{condition="Ready",status="true"} == 0) > 1 and (count(kube_node_status_condition{condition="Ready",status="true"} == 0) / count(kube_node_status_condition{condition="Ready",status="true"})) > 0.2
        for: 1m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Many Kubernetes nodes are Not Ready"
          description: "{{ $value }} Kubernetes nodes (more than 10% are in the NotReady state)."
      - alert: K8SKubeletDown
        expr: count(up{job="kubelet"} == 0) / count(up{job="kubelet"}) > 0.03
        for: 1h
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Many Kubelets cannot be scraped"
          description: "Prometheus failed to scrape {{ $value }}% of kubelets."
      - alert: K8SKubeletDown
        expr: absent(up{job="kubelet"} == 1) or count(up{job="kubelet"} == 0) / count(up{job="kubelet"}) > 0.1
        for: 1h
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Many Kubelets cannot be scraped"
          description: "Prometheus failed to scrape {{ $value }}% of kubelets, or all Kubelets have disappeared from service discovery."
      - alert: K8SKubeletTooManyPods
        expr: kubelet_running_pod_count > 100
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Kubelet is close to pod limit"
          description: "Kubelet {{$labels.instance}} is running {{$value}} pods, close to the limit of 110"
    - name: kube-apiserver.rules
      rules:
      - alert: K8SApiserverDown
        expr: absent(up{job="apiserver"} == 1)
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube API server unreachable"
          description: "Prometheus failed to scrape API server(s), or all API servers have disappeared from service discovery."
      - alert: K8SApiServerLatency
        expr: histogram_quantile(0.99, sum(apiserver_request_latencies_bucket{verb!~"CONNECT|WATCHLIST|WATCH|PROXY"}) WITHOUT (instance, resource)) / 1e+06 > 1
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Kubernetes apiserver latency is high"
          description: "99th percentile Latency for {{ $labels.verb }} requests to the kube-apiserver is higher than 1s."
    - name: kube-controller-manager.rules
      rules:
      - alert: K8SControllerManagerDown
        expr: absent(up{job="kube-controller-manager"} == 1)
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Controller manager is down"
          description: "There is no running K8S controller manager. Deployments and replication controllers are not making progress."
          runbook: "https://coreos.com/tectonic/docs/latest/troubleshooting/controller-recovery.html#recovering-a-controller-manager"
    - name: kube-scheduler.rules
      rules:
      - alert: K8SSchedulerDown
        expr: absent(up{job="kube-scheduler"} == 1)
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Scheduler is down"
          description: "There is no running K8S scheduler. New pods are not being assigned to nodes."
          runbook: "https://coreos.com/tectonic/docs/latest/troubleshooting/controller-recovery.html#recovering-a-scheduler"
    - name: node.rules
      rules:
      - alert: NodeExporterDown
        expr: absent(up{job="node-exporter"} == 1)
        for: 10m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube node-exporter cannot be scraped"
          description: "Prometheus could not scrape a node-exporter for more than 10m, or node-exporters have disappeared from discovery."
      - alert: K8SNodeOutOfDisk
        expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
        labels:
          service: k8s
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Node ran out of disk space."
          description: '{{ $labels.node }} has run out of disk space.'
      - alert: K8SNodeMemoryPressure
        expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
        labels:
          service: k8s
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Node is under memory pressure."
          description: '{{ $labels.node }} is under memory pressure.'
      - alert: K8SNodeDiskPressure
        expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
        labels:
          service: k8s
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Node is under disk pressure."
          description: '{{ $labels.node }} is under disk pressure.'
      - alert: NodeCPUUsage
        expr: (100 - (avg by (instance) (irate(node_cpu{job="node-exporter",mode="idle"}[5m])) * 100)) > 90
        for: 30m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube {{$labels.instance}}: High CPU usage detected"
          description: "{{$labels.instance}}: CPU usage is above 90% (current value is: {{ $value }})"
      - alert: NodeMemoryUsage
        expr: ((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached)/(node_memory_MemTotal)*100) > 90
        for: 30m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube {{$labels.instance}}: High memory usage detected"
          description: "{{$labels.instance}}: Memory usage is above 90% (current value is: {{ $value }})"
      - alert: NodeSwapUsage
        expr: ((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100 > 75
        for: 30m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube {{$labels.instance}}: Swap usage detected"
          description: "{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})"
      - alert: NodeLowRootDisk
        expr: ((node_filesystem_size{mountpoint="/", fstype="rootfs"} - node_filesystem_free{mountpoint="/", fstype="rootfs"} ) / node_filesystem_size{mountpoint="/", fstype="rootfs"} * 100) > 75
        for: 30m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube {{$labels.instance}}: Low root disk space"
          description: "{{$labels.instance}}: Root disk usage is above 75% (current value is: {{ $value }})"
      - alert: NodeLowDataDisk
        expr: ((node_filesystem_size{mountpoint!="/", fstype!="rootfs"} - node_filesystem_free{mountpoint!="/", fstype!="rootfs"} ) / node_filesystem_size{mountpoint!="/", fstype!="rootfs"} * 100) > 75
        for: 30m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube {{$labels.instance}}: Low data disk space"
          description: "{{$labels.instance}}: Data disk usage is above 75% (current value is: {{ $value }})"
      - alert: NodeLoadAverage
        expr: ((node_load5 / count without (cpu, mode) (node_cpu{mode="system"})) > 1)
        for: 2m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube {{$labels.instance}}: High LA detected"
          description: "{{$labels.instance}}: LA is high"
    - name: custom.rules
      rules:
      - alert: DeploymentGenerationMismatch
        expr: kube_deployment_status_observed_generation{job="kube-state-metrics"} != kube_deployment_metadata_generation{job="kube-state-metrics"}
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Deployment of {{$labels.namespace}}/{{$labels.deployment}} failed"
          description: Deployment of {{$labels.namespace}}/{{$labels.deployment}} failed - observed generation != intended generation
      - alert: DeploymentReplicasMismatch
        expr: kube_deployment_spec_replicas{job="kube-state-metrics"} != kube_deployment_status_replicas_available{job="kube-state-metrics"}
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Deployment of {{$labels.deployment}} failed."
          description: Deployment of {{$labels.namespace}}/{{$labels.deployment}} failed - observed replicas != intended replicas.
      - alert: DeploymentReplicasUnavailable
        expr: kube_deployment_status_replicas_unavailable > 0
        for: 5m
        labels:
          severity: "critical"
          cluster: minikube
        annotations:
          summary: "minikube Deployment `{{ $labels.deployment }}` has `{{ $value }}` replica(s) unavailable."
          description: Deployment  `{{ $labels.deployment }}` has `{{ $value }}` replica(s) unavailable.
          runbook: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-pod-replication-controller/
      - alert: PodRestartingTooMuch
        expr: rate(kube_pod_container_status_restarts[5m])*600 > 2
        for: 5m
        labels:
          severity: "warning"
          cluster: minikube
        annotations:
          summary: "minikube Pod `{{ $labels.pod }}` is restarting too much."
          description: Pod `{{ $labels.namespace }}/{{ $labels.pod }}` is restarting too much.
          runbook: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-pod-replication-controller/

  rules: |-
    groups:
      - name: kubernetes.rules
        rules:
          - record: cluster_namespace_controller_pod_container:spec_memory_limit_bytes
            expr: sum(label_replace(container_spec_memory_limit_bytes{container_name!=""}, "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:spec_cpu_shares
            expr: sum(label_replace(container_spec_cpu_shares{container_name!=""}, "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:cpu_usage:rate
            expr: sum(label_replace(irate(container_cpu_usage_seconds_total{container_name!=""}[5m]), "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:memory_usage:bytes
            expr: sum(label_replace(container_memory_usage_bytes{container_name!=""}, "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:memory_working_set:bytes
            expr: sum(label_replace(container_memory_working_set_bytes{container_name!=""}, "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:memory_rss:bytes
            expr: sum(label_replace(container_memory_rss{container_name!=""}, "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:memory_cache:bytes
            expr: sum(label_replace(container_memory_cache{container_name!=""}, "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:disk_usage:bytes
            expr: sum(label_replace(container_disk_usage_bytes{container_name!=""}, "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name)
          - record: cluster_namespace_controller_pod_container:memory_pagefaults:rate
            expr: sum(label_replace(irate(container_memory_failures_total{container_name!=""}[5m]), "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name, scope, type)
          - record: cluster_namespace_controller_pod_container:memory_oom:rate
            expr: sum(label_replace(irate(container_memory_failcnt{container_name!=""}[5m]), "controller", "$1", "pod_name", "^(.*)-[a-z0-9]+")) BY (cluster, namespace, controller, pod_name, container_name, scope, type)
          - record: cluster:memory_allocation:percent
            expr: 100 * sum(container_spec_memory_limit_bytes{pod_name!=""}) BY (cluster) / sum(machine_memory_bytes) BY (cluster)
          - record: cluster:memory_used:percent
            expr: 100 * sum(container_memory_usage_bytes{pod_name!=""}) BY (cluster) / sum(machine_memory_bytes) BY (cluster)
          - record: cluster:cpu_allocation:percent
            expr: 100 * sum(container_spec_cpu_shares{pod_name!=""}) BY (cluster) / sum(container_spec_cpu_shares{id="/"} * ON(cluster, instance) machine_cpu_cores) BY (cluster)
          - record: cluster:node_cpu_use:percent
            expr: 100 * sum(rate(node_cpu{mode!="idle"}[5m])) BY (cluster) / sum(machine_cpu_cores) BY (cluster)
          - record: cluster_resource_verb:apiserver_latency:quantile_seconds
            expr: histogram_quantile(0.99, sum(apiserver_request_latencies_bucket) BY (le, cluster, job, resource, verb)) / 1e+06
            labels:
              quantile: "0.99"
          - record: cluster_resource_verb:apiserver_latency:quantile_seconds
            expr: histogram_quantile(0.9, sum(apiserver_request_latencies_bucket) BY (le, cluster, job, resource, verb)) / 1e+06
            labels:
              quantile: "0.9"
          - record: cluster_resource_verb:apiserver_latency:quantile_seconds
            expr: histogram_quantile(0.5, sum(apiserver_request_latencies_bucket) BY (le, cluster, job, resource, verb)) / 1e+06
            labels:
              quantile: "0.5"
          - record: cluster:scheduler_e2e_scheduling_latency:quantile_seconds
            expr: histogram_quantile(0.99, sum(scheduler_e2e_scheduling_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.99"
          - record: cluster:scheduler_e2e_scheduling_latency:quantile_seconds
            expr: histogram_quantile(0.9, sum(scheduler_e2e_scheduling_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.9"
          - record: cluster:scheduler_e2e_scheduling_latency:quantile_seconds
            expr: histogram_quantile(0.5, sum(scheduler_e2e_scheduling_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.5"
          - record: cluster:scheduler_scheduling_algorithm_latency:quantile_seconds
            expr: histogram_quantile(0.99, sum(scheduler_scheduling_algorithm_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.99"
          - record: cluster:scheduler_scheduling_algorithm_latency:quantile_seconds
            expr: histogram_quantile(0.9, sum(scheduler_scheduling_algorithm_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.9"
          - record: cluster:scheduler_scheduling_algorithm_latency:quantile_seconds
            expr: histogram_quantile(0.5, sum(scheduler_scheduling_algorithm_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.5"
          - record: cluster:scheduler_binding_latency:quantile_seconds
            expr: histogram_quantile(0.99, sum(scheduler_binding_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.99"
          - record: cluster:scheduler_binding_latency:quantile_seconds
            expr: histogram_quantile(0.9, sum(scheduler_binding_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.9"
          - record: cluster:scheduler_binding_latency:quantile_seconds
            expr: histogram_quantile(0.5, sum(scheduler_binding_latency_microseconds_bucket) BY (le, cluster)) / 1e+06
            labels:
              quantile: "0.5"
      - name: recording.rules
        rules:
        - record: instance:fd_utilization
          expr: process_open_fds / process_max_fds
        - record: pod_name:container_memory_usage_bytes:sum
          expr: sum by(pod_name) (container_memory_usage_bytes{container_name!="POD",pod_name!=""})
        - record: pod_name:container_spec_cpu_shares:sum
          expr: sum by(pod_name) (container_spec_cpu_shares{container_name!="POD",pod_name!=""})
        - record: pod_name:container_cpu_usage:sum
          expr: sum by(pod_name) (rate (container_cpu_usage_seconds_total{container_name!="POD",pod_name!=""}[5m]))
        - record: pod_name:container_fs_usage_bytes:sum
          expr: sum by(pod_name) (container_fs_usage_bytes{container_name!="POD",pod_name!=""})
        - record: namespace:container_memory_usage_bytes:sum
          expr: sum by(namespace) (container_memory_usage_bytes{container_name!=""})
        - record: namespace:container_spec_cpu_shares:sum
          expr: sum by(namespace) (container_spec_cpu_shares{container_name!=""})
        - record: namespace:container_cpu_usage:sum
          expr: sum by(namespace) (rate (container_cpu_usage_seconds_total{container_name!="POD"}[5m]))
        - record: instance:node_cpu:rate:sum
          expr: sum by(instance) (rate(node_cpu{mode!="idle",mode!="iowait",mode!~"guest.*"}[1m]))
        - record: instance:node_filesystem_usage:sum
          expr: sum by(instance) ((node_filesystem_size{mountpoint="/"} - node_filesystem_free{mountpoint="/"}))
        - record: instance:node_network_receive_bytes:rate:sum
          expr: sum by(instance) (rate(node_network_receive_bytes[1m]))
        - record: instance:node_network_transmit_bytes:rate:sum
          expr: sum by(instance) (rate(node_network_transmit_bytes[1m]))